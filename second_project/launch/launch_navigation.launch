<launch>

  <arg name="waypoints_file" default="$(find second_project)/waypoints.csv" />
  <arg name="map_file"       default="$(find second_project)/maps/cleaned/map_cleaned.yaml" /> 
  <arg name="world_file"     default="$(find second_project)/stage/map.world" />
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>

  <param name="use_sim_time" value="true"/>

  <!-- Simulation -->
  <node pkg="stage_ros" type="stageros" name="stageros" output="screen" args="$(arg world_file)">
    <remap from="base_scan" to="scan" />
  </node>

  <!-- Map -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
    <param name="base_watchdog_timeout" value="0.5"/>
    <param name="frame_id" value="map"/>
  </node>

  <!-- Localization with AMCL -->
  <include file="$(find second_project)/launch/amcl.launch.xml">
    <arg name="scan_topic" value="scan"/>
    <arg name="use_map_topic" value="true"/>
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>

  <!-- Navigation -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find second_project)/config/navigation/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find second_project)/config/navigation/costmap_common_params.yaml" command="load" ns="local_costmap" />   
    <rosparam file="$(find second_project)/config/navigation/local_costmap_params.yaml" command="load" />   
    <rosparam file="$(find second_project)/config/navigation/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find second_project)/config/navigation/dwa_local_planner_params.yaml" command="load" />
    <rosparam file="$(find second_project)/config/navigation/move_base_params.yaml" command="load" /> 

    <param name="base_global_planner" value="navfn/NavfnROS" />  <!--   planner  navfn/NavfnROS alternative  carrot_planner/CarrotPlanner -->
    <param name="planner_frequency" value="1.0" />
    <param name="planner_patience" value="5.0" /> <!-- How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.  -->

    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <param name="controller_frequency" value="5.0" />
    <param name="controller_patience" value="5.0" /> <!-- How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.  -->

    <param name="clearing_rotation_allowed" value="true"/> 
  </node>

  <!-- Rviz for convenience -->  
  <node pkg="rviz" name="rviz" type="rviz" output="screen" args="-d $(find second_project)/config/nav_rviz_cfg.rviz"/>
  
  <!-- Goal-sending node -->
  <node name="goal_publisher" pkg="second_project" type="goal_publisher" output="screen">
    <param name="waypoints_file" value="$(arg waypoints_file)"/>
  </node>

</launch>
